# -*- coding: utf-8 -*-
"""파이썬 기본공부 3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yjQxoTQqOhdI2G5vMgIUP1PK66fPkY2p
"""

# 문제 : 입력받은 정수의 모든 약수의 합을 리턴하는 함수를 구현해주세요.

def get_divisors_sum(num):
  s = 0
  i = 1
     
  while i <= num:

    if num % i == 0:
      s += i

    i += 1

  return s



  return s

s = get_divisors_sum(1000)

print("정수 1000의 약수의 합 : {}".format(s))
# 출력 => 정수 1000의 약수의 합 : 2340

# 문제 : 입력받은 정수가 소수인지 아닌지 알려주는 함수를 구현해주세요.

def is_prime_number(num):

  if num ==1:
    return False

  i  = 2
  
  while i < num:
    if num % i == 0:
      return False
    i += 1
  return True

print("3은 소수입니다 : {}".format(is_prime_number(3)))
print("4는 소수입니다 : {}".format(is_prime_number(4)))
print("1000은 소수입니다 : {}".format(is_prime_number(1000)))

# 문제 : 1부터 1000사이에 존재하는 소수들의 개수를 출력해주세요.
def is_prime_number(num):

  if num ==1:
    return False

  i  = 2
  
  while i < num:
    if num % i == 0:
      return False
    i += 1
  return True

i = 1
cnt  = 0
while i <= 1000:
  if is_prime_number(i):
    cnt += 1

  i += 1

print("소수의 개수 : {}".format(cnt))

#문제 : 입력받은 숫자가 10이라고 할때 1부터 10 사이에 존재하는 모든 소수를 출력하는 함수 구현
def is_prime_number(num):
  if num ==1:
    return False

  i  = 2
  
  while i < num:
    if num % i == 0:
      return False
    i += 1
  return True

def print_1_to_n_prime_numbers(num):

  i = 1
  while i <= num:

    if is_prime_number(i):
      print(i)
    i+=1

print_1_to_n_prime_numbers(10)
print_1_to_n_prime_numbers(20)

# 문제 : 1부터 n 사이의 수 중에서 소수의 개수 반환하는 함수 `get_1_to_n_prime_numbers_count` 를 구현해주세요.
def is_prime_number(num):
  if num ==1:
    return False

  i  = 2
  
  while i < num:
    if num % i == 0:
      return False
    i += 1
  return True

#1부터 n 사이의 수 중에서 소수의 개수 반환하는 함수
def get_1_to_n_prime_numbers_count(n):
  #여기서 구현해주세요.
  count = 0

  i = 1
  while i <= n:
    if is_prime_number(i):
      count +=1
    i += 1

  return count


count = 0
number = 0

number = 1000
count = get_1_to_n_prime_numbers_count(number)
print("1부터 {}사이에 존재하는 소수의 개수 : {}개\n".format(number, count))
  # 출력 => 1부터 1000사이에 존재하는 소수의 개수 : 168개

number = 2000
count = get_1_to_n_prime_numbers_count(number)
print("1부터 {}사이에 존재하는 소수의 개수 : {}개\n".format(number, count))
  # 출력 => 1부터 2000사이에 존재하는 소수의 개수 : 303개

# 문제 : 1부터 n 사이의 수 중에서 소수의 합을 반환하는 함수 `get_1_to_n_prime_numbers_sum` 를 구현해주세요.

def is_prime_number(num):
  if num ==1:
    return False

  i  = 2
  
  while i < num:
    if num % i == 0:
      return False
    i += 1
  return True

# 1부터 n 사이의 수 중에서 소수의 합 반환하는 함수
def get_1_to_n_prime_numbers_sum(n):
  # 구현
  sum = 0
  
  i = 1
  while  i <= n :
    
    if is_prime_number(i):
      sum += i
    i += 1
  return sum

sum = 0
number = 0

number = 1000
sum = get_1_to_n_prime_numbers_sum(number)
print("1부터 {}사이에 존재하는 소수의 합 : {}개\n".format(number, sum))
  # 출력 => 1부터 1000사이에 존재하는 소수의 합 : 76127

number = 2000
sum = get_1_to_n_prime_numbers_sum(number)
print("1부터 {}사이에 존재하는 소수의 합 : {}개\n".format(number, sum))
 # 출력 => 1부터 2000사이에 존재하는 소수의 합 : 277050

#자요형의 변환
#두개의 숫자를 연결하여 문자로 출력하기
a = 10
b = 20

print(str(a) + str(b))
print("{}{}".format(a,b))

print(type(a))
print(type(b))
# 출력 => 1020

#자료형의 변환
#두개의 숫자문장를 더해서 새 정수를 만들어주세요
a = '3'
b = '6'

print(int(a)+int(b))
# 출력 9

print(type(a))
print(type(b))

#두개의 숫자문장를 더해서 새 실수를 만들어주세요.
a = float(3.1)
b = float(6.1)

print(a + b)
# 출력 9.2

print(type(a))
print(type(b))

#2개 실수문장을 정수화 하여 더해주세요.
a = '3.1'
b = '6.1'


#a = float(a)
#b = float(b)

#a = int(a)
#b = int(b)


#print(a + b)

print(int(float(a))+int(float(b)))
# 출력 9